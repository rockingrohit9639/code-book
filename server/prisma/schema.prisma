generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  firstName String?
  lastName  String?
  role      UserRole  @default(USER)
  mobile    Int?
  username  String    @unique
  bio       String?
  dob       DateTime?

  website  String?
  github   String?
  linkedin String?

  password String
  salt     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  files           File[]
  posts           Post[]
  followers       User[]         @relation("UserFollows", fields: [followerIds], references: [id])
  followerIds     String[]       @db.ObjectId
  following       User[]         @relation("UserFollows", fields: [followingIds], references: [id])
  followingIds    String[]       @db.ObjectId
  likedPosts      Like[]
  comments        Comment[]
  byNotifications Notification[] @relation(name: "NotificationBy")
  toNotifications Notification[] @relation(name: "NotificationTo")
}

model File {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  createdBy    User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String @db.ObjectId
  originalName String
  encoding     String
  mimeType     String
  filename     String
  size         Int
  post         Post?  @relation(name: "PostImage")
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  image       File     @relation(fields: [imageId], references: [id], name: "PostImage")
  imageId     String   @unique @db.ObjectId
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String   @db.ObjectId
  codeSnippet String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  likes    Like[]
  comments Comment[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String @db.ObjectId
  likedBy   User   @relation(fields: [likedById], references: [id], onDelete: Cascade)
  likedById String @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post        Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String @db.ObjectId
  comment     String
  commentBy   User   @relation(fields: [commentById], references: [id], onDelete: Cascade)
  commentById String @db.ObjectId
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notificationBy   User    @relation(fields: [notificationById], references: [id], onDelete: Cascade, name: "NotificationBy")
  notificationById String  @db.ObjectId
  notificationTo   User    @relation(fields: [notificationToId], references: [id], onDelete: Cascade, name: "NotificationTo")
  notificationToId String  @db.ObjectId
  content          String
  isRead           Boolean @default(false)
}
