generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  firstName String?
  lastName  String?
  role      UserRole  @default(USER)
  mobile    Int?
  username  String    @unique
  bio       String?
  dob       DateTime?

  website  String?
  github   String?
  linkedin String?

  password String
  salt     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  files                File[]
  posts                Post[]
  followers            User[]         @relation("UserFollows", fields: [followerIds], references: [id])
  followerIds          String[]       @db.ObjectId
  following            User[]         @relation("UserFollows", fields: [followingIds], references: [id])
  followingIds         String[]       @db.ObjectId
  likedPosts           Like[]
  comments             Comment[]
  byNotifications      Notification[] @relation(name: "NotificationBy")
  toNotifications      Notification[] @relation(name: "NotificationTo", references: [id], fields: [toNotificationIds])
  toNotificationIds    String[]       @db.ObjectId
  conversations        Conversation[] @relation(fields: [conversationIds], references: [id])
  conversationIds      String[]       @db.ObjectId
  conversationsCreated Conversation[] @relation(name: "ConversationsCreated")
  sentMessages         Message[]      @relation(name: "SentMessages")
  receivedMessages     Message[]      @relation(name: "ReceivedMessages")
  postsViewed          View[]
}

model File {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  createdBy    User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String @db.ObjectId
  originalName String
  encoding     String
  mimeType     String
  filename     String
  size         Int
  post         Post?  @relation(name: "PostImage")
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  image       File     @relation(fields: [imageId], references: [id], name: "PostImage")
  imageId     String   @unique @db.ObjectId
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String   @db.ObjectId
  codeSnippet String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  views Int @default(0)

  likes         Like[]
  comments      Comment[]
  notifications Notification[]
  viewdByUsers  View[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String @db.ObjectId
  likedBy   User   @relation(fields: [likedById], references: [id], onDelete: Cascade)
  likedById String @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post        Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String @db.ObjectId
  comment     String
  commentBy   User   @relation(fields: [commentById], references: [id], onDelete: Cascade)
  commentById String @db.ObjectId
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  POST_UPLOAD
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notificationBy    User             @relation(fields: [notificationById], references: [id], onDelete: Cascade, name: "NotificationBy")
  notificationById  String           @db.ObjectId
  notificationTo    User[]           @relation(fields: [notificationToIds], references: [id], name: "NotificationTo")
  notificationToIds String[]         @db.ObjectId
  content           String
  isRead            Boolean          @default(false)
  post              Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId            String?          @db.ObjectId
  type              NotificationType
}

model Conversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isGroup   Boolean  @default(false)

  users       User[]    @relation(fields: [userIds], references: [id])
  userIds     String[]  @db.ObjectId
  createdBy   User      @relation(fields: [createdById], references: [id], name: "ConversationsCreated", onDelete: Cascade)
  createdById String    @db.ObjectId
  messages    Message[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  seen      Boolean  @default(false)
  delivered Boolean

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String       @db.ObjectId
  from           User         @relation(fields: [fromId], references: [id], onDelete: Cascade, name: "SentMessages")
  fromId         String       @db.ObjectId
  recipient      User?        @relation(fields: [recipientId], references: [id], onDelete: Cascade, name: "ReceivedMessages")
  recipientId    String?      @db.ObjectId
}

model View {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?  @db.ObjectId

  viewedBy User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String @db.ObjectId
}

model Tag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tag       String   @unique
}
